local term = require("term")
local os = require("os")
local component = require("component")
local modem = component.modem
local computer = require("computer")
local event = require("event")
local unicode = require("unicode")

os.execute("resolution 80 25")
while true do
term.clear()
local door = 0
local object = 0
local action = 0
local room = 0
local question = 0
local passcode = 0

local borders = {{unicode.char(0x2552), unicode.char(0x2550), unicode.char(0x2555)},
                 {unicode.char(0x2502), nil, unicode.char(0x2502)},
                 {unicode.char(0x2514), unicode.char(0x2500), unicode.char(0x2518)}}
io.write(borders[1][1], string.rep(borders[1][2], 78), borders[1][3], "\n")
io.write(borders[2][1], " ", "                   Willkommen bei ihrem Smart Home System!", (" "):rep(19), borders[2][3], "\n")
io.write(borders[3][1], string.rep(borders[3][2], 78), borders[3][3], "\n")

print("Wollen sie ihre Türen oder Lichter fernsteuern, oder die Alarmanlage überprüfen? ") --Was will der Nutzer machen?
print("")
object = io.read()
print("")

if object == "Wartungsmodus" then modem.broadcast(1, "maintenance") os.sleep(1) end

if object == "Alarmanlage überprüfen" then modem.broadcast(1, "check Alarm")      --Alarm überprüfen
   modem.open(2) 
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)    
   passcode = io.read() modem.send(sender, 2 , passcode)                                            --Passworteingabe
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)
   if message == "Es wurde ein Alarm ausgelöst! Wollen sie den Alarm zurücksetzen oder deaktivieren und die Tür entsperren?" then action = io.read() modem.send(sender, 2, action) end                       --Aktion mit der Alarmanlage
   os.sleep(1) end

if object == "Türen" then modem.broadcast(1, "Türen")      --Alarm überprüfen
   modem.open(2) 
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)    
   passcode = io.read() modem.send(sender, 2 , passcode)     --Passworteingabe
   print("")
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)
   action = io.read() modem.send(sender, 2, action)          --Auswahl der Tür
   print("")
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)
   if message == "Fehler: Unbekannte Tür!" then
   else action = io.read() modem.send(sender, 2, action) end          --Aktion
   os.sleep(1) end 
if object == "Lichter" then modem.broadcast(1, "Lichter")
   modem.open(2)
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)    
   passcode = io.read() modem.send(sender, 2 , passcode)                                            --Passworteingabe
   print("")
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)
   room = io.read() modem.send(sender, 2, room)                                                     --Raumeingabe
   print("")
   if room == "in allen ausschalten" then
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)       --Rückmeldung
   
   else mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)
   if message == "Fehler: Unbekannter Raum!" then
   else action = io.read() modem.send(sender, 2, action)                                                  --Aktion
   if action == "nein" then
   else 
   mm, reciever, sender, port, distance, message = event.pull("modem_message") print(message)        --Rückmeldung
   end
   end
   end
   os.sleep(1) end
end
